{"version":3,"sources":["canvas/Rectangle.js","canvas/Circle.js","canvas/line.js","canvas/textNode.js","canvas/HomePage.js","canvas/Test.js","components/images.js","App.js","reportWebVitals.js","index.js"],"names":["Rectangle","shapeProps","isSelected","onSelect","onChange","shapeRef","React","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","Fragment","onClick","ref","draggable","onDragEnd","e","x","target","y","onTransformEnd","node","scaleX","scaleY","width","height","Circ","isPaint","fn","mode","addLine","stage","layer","lastLine","on","pos","getPointerPosition","Konva","Line","stroke","strokeWidth","globalCompositeOperation","points","add","newPoints","concat","uuidv1","addTextNode","id","textNode","Text","text","fontSize","tr","Transformer","enabledAnchors","boundBoxFunc","oldBox","newBox","Math","max","this","clickStartShape","_id","attachTo","draw","detach","setAttrs","hide","textPosition","absolutePosition","stageBox","container","getBoundingClientRect","areaPosition","left","top","textarea","document","createElement","body","appendChild","value","style","position","padding","border","margin","overflow","background","outline","resize","lineHeight","fontFamily","transformOrigin","textAlign","align","color","fill","rotation","transform","px","removeTextarea","parentNode","removeChild","window","removeEventListener","handleOutsideClick","show","forceUpdate","navigator","userAgent","toLowerCase","indexOf","round","scrollHeight","focus","addEventListener","keyCode","shiftKey","scale","getAbsoluteScale","newWidth","placeholder","length","isSafari","test","isFirefox","ceil","documentMode","setTextareaWidth","setTimeout","require","URLImage","image","unSelectShape","stageScale","onDelete","deleteButton","useImage","src","img","nodes","onMouseEnter","event","getStage","cursor","onMouseLeave","offsetX","offsetY","onTap","Circle","radius","HomePage","useState","rectangles","setRectangles","circles","setCircles","selectedId","selectShape","shapes","setShapes","updateState","stageEl","createRef","layerEl","name2","dragUrl","images","setImages","imageList","dispImg","setDispImg","tweet","setTweet","prevLink","setPrevLink","isToggled","setShow","canvasShow","setCanvasShow","btnShow","setBtnShow","btnHide","setBtnHide","prevHide","setPrevHide","val2","setVal2","tmp","setTmp","tmp2","setTmp2","stageSpec","handleRemove","index","newList","filter","item","prop","onDeleteImage","newImages","splice","getRandomInt","useParams","floor","random","handleChange","dataURL","payload","fetch","method","headers","JSON","stringify","then","res","json","key","console","log","conveImg","conveImgURL","showCanvas","useCallback","ev","code","findIndex","c","r","i","loadFn","className","rel","href","autoComplete","name","title","onLoad","onDragStart","url","varimg2","setAttribute","onload","canvas","getContext","drawImage","toDataURL","getBase64Image2","class","role","aria-label","rect","rects","shs","circ","circs","lastId","pop","aria-hidden","location","reload","map","onDrop","preventDefault","setPointersPositions","getRelativePointerPosition","onDragOver","bottom","innerWidth","innerHeight","onMouseDown","newAttrs","slice","circle","imageUrl","content","link","display","type","data-size","Home","Images","data","setData","axios","get","response","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a170d66d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Rect, Transformer } from \"react-konva\";\r\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n      // we need to attach transformer manually\r\n      trRef.current.setNode(shapeRef.current);\r\n      trRef.current.getLayer().batchDraw();\r\n    }   \r\n  }, [isSelected]);\r\n  return (\r\n    <React.Fragment>\r\n      <Rect\r\n        onClick={onSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={e => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={e => {\r\n          // transformer is changing scale\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            width: node.width() * scaleX,\r\n            height: node.height() * scaleY,\r\n          });\r\n        }}\r\n      />\r\n      {isSelected && <Transformer ref={trRef} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Rectangle;","import React from \"react\";\r\nimport { Circle, Transformer } from \"react-konva\";\r\nconst Circ = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n      trRef.current.setNode(shapeRef.current);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n  return (\r\n    <React.Fragment>\r\n      <Circle\r\n        onClick={onSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          // transformer is changing scale\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            width: node.width() * scaleX,\r\n            height: node.height() * scaleY,\r\n          });\r\n        }}\r\n      />\r\n      {isSelected && <Transformer ref={trRef} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Circ;\r\n","import Konva from \"konva\";\r\nlet isPaint = false;\r\nconst fn =(mode)=>{\r\n  if (mode === \"none\" ){\r\n  isPaint = false;\r\n  return 0;}\r\n  else if (mode === \"brush\")\r\n  return 4\r\n  else\r\n  return 20\r\n}\r\nexport const addLine = (stage, layer, mode ) => {\r\n  \r\n  let lastLine;\r\n  stage.on(\"mousedown touchstart\", function (e) {\r\n    isPaint = true;\r\n    let pos = stage.getPointerPosition();\r\n    lastLine = new Konva.Line({\r\n      stroke:mode === \"brush\" ? \"black\" : \"white\" ,//mode === \"brush\"?\"black\":mode === \"eraser\"?\"white\":null ,\r\n      strokeWidth:  fn(mode),\r\n      \r\n      globalCompositeOperation:\r\n        mode === \"brush\" ? \"source-over\" : \"destination-out\",\r\n      points: [pos.x, pos.y],\r\n      draggable: mode === \"brush\",\r\n    });\r\n    layer.add(lastLine);\r\n  });\r\n  stage.on(\"mouseup touchend\", function () {\r\n    isPaint = false;\r\n  });\r\n  stage.on(\"mousemove touchmove\", function () {\r\n    if (!isPaint) {\r\n      return;\r\n    }\r\n    const pos = stage.getPointerPosition();\r\n    let newPoints = lastLine.points().concat([pos.x, pos.y]);\r\n    lastLine.points(newPoints);\r\n    layer.batchDraw();\r\n  });\r\n};\r\n","import Konva from \"konva\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nuuidv1();\r\nexport const addTextNode = (stage, layer) => {\r\n  const id = uuidv1();\r\n  const textNode = new Konva.Text({\r\n    text: \"double click to type here\",\r\n    x: 50,\r\n    y: 80,\r\n    fontSize: 20,\r\n    draggable: true,\r\n    width: 200,\r\n    id,\r\n  });\r\n  layer.add(textNode);\r\n  let tr = new Konva.Transformer({\r\n    node: textNode,\r\n    enabledAnchors: [\"middle-left\", \"middle-right\"],\r\n    // set minimum width of text\r\n    boundBoxFunc: function (oldBox, newBox) {\r\n      newBox.width = Math.max(30, newBox.width);\r\n      return newBox;\r\n    },\r\n  });\r\n  stage.on(\"click\", function (e) {\r\n    if (!this.clickStartShape) {\r\n      return;\r\n    }\r\n    if (e.target._id === this.clickStartShape._id) {\r\n      layer.add(tr);\r\n      tr.attachTo(e.target);\r\n      layer.draw();\r\n    } else {\r\n      tr.detach();\r\n      layer.draw();\r\n    }\r\n  });\r\n  textNode.on(\"transform\", function () {\r\n    // reset scale, so only with is changing by transformer\r\n    textNode.setAttrs({\r\n      width: textNode.width() * textNode.scaleX(),\r\n      scaleX: 1,\r\n    });\r\n  });\r\n  layer.add(tr);\r\n  layer.draw();\r\n  textNode.on(\"dblclick\", () => {\r\n    // hide text node and transformer:\r\n    textNode.hide();\r\n    tr.hide();\r\n    layer.draw();\r\n    // create textarea over canvas with absolute position\r\n    // first we need to find position for textarea\r\n    // how to find it?\r\n    // at first lets find position of text node relative to the stage:\r\n    let textPosition = textNode.absolutePosition();\r\n    // then lets find position of stage container on the page:\r\n    let stageBox = stage.container().getBoundingClientRect();\r\n    // so position of textarea will be the sum of positions above:\r\n    let areaPosition = {\r\n      x: stageBox.left + textPosition.x,\r\n      y: stageBox.top + textPosition.y,\r\n    };\r\n    // create textarea and style it\r\n    let textarea = document.createElement(\"textarea\");\r\n    document.body.appendChild(textarea);\r\n    // apply many styles to match text on canvas as close as possible\r\n    // remember that text rendering on canvas and on the textarea can be different\r\n    // and sometimes it is hard to make it 100% the same. But we will try...\r\n    textarea.value = textNode.text();\r\n    textarea.style.position = \"absolute\";\r\n    textarea.style.top = areaPosition.y + \"px\";\r\n    textarea.style.left = areaPosition.x + \"px\";\r\n    textarea.style.width = textNode.width() - textNode.padding() * 2 + \"px\";\r\n    textarea.style.height =\r\n      textNode.height() - textNode.padding() * 2 + 5 + \"px\";\r\n    textarea.style.fontSize = textNode.fontSize() + \"px\";\r\n    textarea.style.border = \"none\";\r\n    textarea.style.padding = \"0px\";\r\n    textarea.style.margin = \"0px\";\r\n    textarea.style.overflow = \"hidden\";\r\n    textarea.style.background = \"none\";\r\n    textarea.style.outline = \"none\";\r\n    textarea.style.resize = \"none\";\r\n    textarea.style.lineHeight = textNode.lineHeight();\r\n    textarea.style.fontFamily = textNode.fontFamily();\r\n    textarea.style.transformOrigin = \"left top\";\r\n    textarea.style.textAlign = textNode.align();\r\n    textarea.style.color = textNode.fill();\r\n    let rotation = textNode.rotation();\r\n    let transform = \"\";\r\n    if (rotation) {\r\n      transform += \"rotateZ(\" + rotation + \"deg)\";\r\n    }\r\n    let px = 0;\r\n    let isFirefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\r\n    if (isFirefox) {\r\n      px += 2 + Math.round(textNode.fontSize() / 20);\r\n    }\r\n    transform += \"translateY(-\" + px + \"px)\";\r\n    textarea.style.transform = transform;\r\n    textarea.style.height = \"auto\";\r\n    // after browsers resized it we can set actual value\r\n    textarea.style.height = textarea.scrollHeight + 3 + \"px\";\r\n    textarea.focus();\r\n    function removeTextarea() {\r\n      textarea.parentNode.removeChild(textarea);\r\n      window.removeEventListener(\"click\", handleOutsideClick);\r\n      textNode.show();\r\n      tr.show();\r\n      tr.forceUpdate();\r\n      layer.draw();\r\n      \r\n    }\r\n    function setTextareaWidth(newWidth) {\r\n      if (!newWidth) {\r\n        // set width for placeholder\r\n        newWidth = textNode.placeholder.length * textNode.fontSize();\r\n      }\r\n      // some extra fixes on different browsers\r\n      let isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n      let isFirefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\r\n      if (isSafari || isFirefox) {\r\n        newWidth = Math.ceil(newWidth);\r\n      }\r\n      let isEdge = document.documentMode || /Edge/.test(navigator.userAgent);\r\n      if (isEdge) {\r\n        newWidth += 1;\r\n      }\r\n      textarea.style.width = newWidth + \"px\";\r\n    }\r\n    textarea.addEventListener(\"keydown\", function (e) {\r\n      // hide on enter\r\n      // but don't hide on shift + enter\r\n      if (e.keyCode === 13 && !e.shiftKey) {\r\n        textNode.text(textarea.value);\r\n        removeTextarea();\r\n      }\r\n      // on esc do not set value back to node\r\n      if (e.keyCode === 27) {\r\n        removeTextarea();\r\n      }\r\n    });\r\n    textarea.addEventListener(\"keydown\", function (e) {\r\n      let scale = textNode.getAbsoluteScale().x;\r\n      setTextareaWidth(textNode.width() * scale);\r\n      textarea.style.height = \"auto\";\r\n      textarea.style.height =\r\n        textarea.scrollHeight + textNode.fontSize() + \"px\";\r\n    });\r\n    function handleOutsideClick(e) {\r\n      if (e.target !== textarea) {\r\n        removeTextarea();\r\n        \r\n      }\r\n       tr.hide();\r\n    }\r\n    setTimeout(() => {\r\n      window.addEventListener(\"click\", handleOutsideClick);\r\n      \r\n    });\r\n    \r\n  });\r\n  return id;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n//import ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Dropzone from \"react-dropzone\";\r\n//import axios from 'axios';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./HomePage.css\";\r\nimport {\r\n  Image as KonvaImage,\r\n  Stage,\r\n  Layer,\r\n  Image,\r\n  Rect,\r\n  Transformer,\r\n} from \"react-konva\";\r\nimport Rectangle from \"./Rectangle\";\r\nimport Circle from \"./Circle\";\r\nimport { addLine } from \"./line\";\r\nimport { addTextNode } from \"./textNode\";\r\nimport useImage from \"use-image\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nimport axios from \"axios\";\r\nconst imageToBase64 = require(\"image-to-base64\");\r\n\r\nuuidv1();\r\n\r\n\r\n\r\nconst URLImage = ({\r\n  image,\r\n  shapeProps,\r\n  unSelectShape,\r\n  isSelected,\r\n  onSelect,\r\n  onChange,\r\n  stageScale,\r\n  onDelete,\r\n}) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n  const deleteButton = React.useRef();\r\n  const [img] = useImage(image.src);\r\n\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  const onMouseEnter = (event) => {\r\n    if (isSelected) {\r\n      event.target.getStage().container().style.cursor = \"move\";\r\n    }\r\n    if (!isSelected) {\r\n      event.target.getStage().container().style.cursor = \"pointer\";\r\n    }\r\n  };\r\n\r\n  const onMouseLeave = (event) => {\r\n    event.target.getStage().container().style.cursor = \"default\";\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    unSelectShape(null);\r\n    onDelete(shapeRef.current);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Image\r\n        image={img}\r\n        x={image.x}\r\n        y={image.y}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n        // I will use offset to set origin to the center of the image\r\n        offsetX={img ? img.width / 2 : 0}\r\n        offsetY={img ? img.height / 2 : 0}\r\n        onClick={onSelect}\r\n        onTap={onSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={(e) => {\r\n          onChange({\r\n            ...shapeProps,\r\n            x: e.target.x(),\r\n            y: e.target.y(),\r\n          });\r\n        }}\r\n        onTransformEnd={(e) => {\r\n          // transformer is changing scale of the node\r\n          // and NOT its width or height\r\n          // but in the store we have only width and height\r\n          // to match the data better we will reset scale on transform end\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n          onChange({\r\n            ...shapeProps,\r\n            x: node.x(),\r\n            y: node.y(),\r\n            // set minimal value\r\n            width: Math.max(5, node.width() * scaleX),\r\n            height: Math.max(node.height() * scaleY),\r\n          });\r\n        }}\r\n      />\r\n      {isSelected && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        >\r\n          <Circle\r\n            radius={8}\r\n            fill=\"red\"\r\n            ref={deleteButton}\r\n            onClick={handleDelete}\r\n            x={shapeRef.current.width() * stageScale}\r\n          ></Circle>\r\n        </Transformer>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nfunction HomePage() {\r\n  const [rectangles, setRectangles] = useState([]);\r\n  const [circles, setCircles] = useState([]);\r\n  const [selectedId, selectShape] = useState(null);\r\n  const [shapes, setShapes] = React.useState([]);\r\n  const [, updateState] = React.useState();\r\n  const stageEl = React.createRef();\r\n  const layerEl = React.createRef();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [name2, setName2] = React.useState(\"\");\r\n  const dragUrl = React.useRef();\r\n  const [images, setImages] = React.useState([]);\r\n\r\n  let y;\r\n  const [imageList, setImageList] = React.useState([]);\r\n  const [dispImg, setDispImg] = React.useState([]);\r\n  const [dispLogo, setDispLogo] = React.useState([]);\r\n  const [tweet, setTweet] = React.useState(\"\");\r\n  const [prevLink, setPrevLink] = React.useState(\"\");\r\n  const [isToggled, setIsToggled] = React.useState(false);\r\n  const [show, setShow] = React.useState(false);\r\n  const [canvasShow, setCanvasShow] = React.useState(false);\r\n  const [btnShow, setBtnShow] = React.useState(true);\r\n  const [btnHide, setBtnHide] = React.useState(false);\r\n  const [prevHide, setPrevHide] = React.useState(false);\r\n  const [val, setVal] = React.useState([\"\"]);\r\n  const [val2, setVal2] = React.useState([\"\"]);\r\n  const [draw, setDraw] = useState(true);\r\n  // const [notfound, setNotfound] = useState(\"  \")\r\n  const [tmp, setTmp] = useState(\"\");\r\n  const [tmp2, setTmp2] = useState(\"\");\r\n  const [stageSpec, setStageSpec] = useState({\r\n    scale: 1,\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n\r\n  const handleRemove = (index) => {\r\n    const newList = images.filter((item) => item.index !== index);\r\n\r\n    setImages(newList);\r\n  };\r\n\r\n  // const checkDeselect = (e) => {\r\n  //   // deselect when clicked on empty area\r\n  //   const clickedOnEmpty = e.target === e.target.getStage();\r\n  //   if (clickedOnEmpty) {\r\n  //     selectShape(null);\r\n  //   }\r\n  // };\r\n\r\n  const unSelectShape = (prop) => {\r\n    selectShape(prop);\r\n  };\r\n\r\n  const onDeleteImage = (node) => {\r\n    const newImages = [...images];\r\n    newImages.splice(node.index, 1);\r\n    setImages(newImages);\r\n  };\r\n  let { id } = useParams();\r\n  const getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  };\r\n\r\n  const getBase64Image2 = (url) => {\r\n    const varimg2 = document.createElement(\"img\"); //new Image();\r\n    varimg2.setAttribute(\"crossOrigin\", \"anonymous\");\r\n    varimg2.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = varimg2.width;\r\n      canvas.height = varimg2.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(varimg2, 0, 0);\r\n      const dataURL = canvas.toDataURL(\"image/png\");\r\n      // console.log(\"dataurl = \",dataURL)\r\n      setVal2(dataURL);\r\n    };\r\n    varimg2.src = url;\r\n    // console.log(\"conso\",val)\r\n    return val2;\r\n  }; //hello\r\n  const getBase64Image = (url) => {\r\n    const varimg = document.createElement(\"img\"); //new Image();\r\n    varimg.setAttribute(\"crossOrigin\", \"anonymous\");\r\n    varimg.onload = () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = varimg.width;\r\n      canvas.height = varimg.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(varimg, 0, 0);\r\n      const dataURL = canvas.toDataURL(\"image/png\");\r\n      // console.log(\"dataurl = \",dataURL)\r\n      setVal(dataURL);\r\n    };\r\n    varimg.src = url;\r\n    console.log(\"base64 = \", val);\r\n    return val;\r\n  };\r\n\r\n  function refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n\r\n  async function getBase64(file) {\r\n    let result_base64 = await new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      reader.onload = (e) => resolve(reader.result);\r\n\r\n      reader.readAsDataURL(file);\r\n    });\r\n    console.log(result_base64);\r\n    return result_base64;\r\n  }\r\n\r\n  const takeshot = async () => {\r\n    let div = await document.getElementById(\"canvass\");\r\n    html2canvas(div, {\r\n      allowTaint: true,\r\n      foreignObjectRendering: true,\r\n      useCORS: true,\r\n    }).then(function (canvas) {\r\n      document.getElementById(\"output\").appendChild(canvas);\r\n    });\r\n  };\r\n\r\n  function gotFile(file) {\r\n    Dropzone.style(\"display\", \"none\");\r\n\r\n    if (file.type === \"image\") {\r\n      var image = new Image();\r\n\r\n      image.onload = function () {\r\n        document.body.appendChild(this);\r\n      };\r\n\r\n      image.src = file.data;\r\n    }\r\n  }\r\n  // const dis = () => {\r\n\r\n  //   axios.get(`http://localhost:5000/images/${tmp}`).then((response)=> {\r\n  //   // setLink(response)\r\n  //   console.log(\"response = \",response)\r\n  // });\r\n  // }\r\n  const conveImg = (dataURL) => {\r\n    const payload = {\r\n      img: dataURL,\r\n    };\r\n    fetch(\"https://logolego.bookmane.in/api/tmp\", {\r\n      // fetch(\"http://localhost:5000/api/tmp\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    })\r\n      .then(function (res) {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (res.key == \"Not Found\") {\r\n          // console.log(\"nahi mila\");\r\n          // setNotfound(\"Logo not found\")\r\n          setTmp(null);\r\n        } else if (res.key === \"Search\") {\r\n          // setNotfound(\"Search for imager\")\r\n          setTmp(null);\r\n        } else {\r\n          setTmp(res.key);\r\n          console.log(\"res = \", res.key);\r\n        }\r\n      });\r\n  };\r\n\r\n  const conveImgURL = (dataURL) => {\r\n    const payload = {\r\n      img: dataURL,\r\n    };\r\n    // fetch(\"http://localhost:5000/api/tmp/url\", {\r\n      fetch(\"https://logolego.bookmane.in/api/tmp/url\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    })\r\n      .then(function (res) {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (res.key == \"Not Found\") {\r\n          // console.log(\"nahi mila\");\r\n          // setNotfound(\"Logo not found\")\r\n          setTmp2(null);\r\n        } else if (res.key === \"Search\") {\r\n          // setNotfound(\"Search for imager\")\r\n          setTmp2(null);\r\n        } else {\r\n          setTmp2(res.key);\r\n          console.log(\"res = \", res.key);\r\n        }\r\n      });\r\n  };\r\n\r\n\r\n  const handleChange = (value) => {\r\n    // setName(\r\n    //   \"https://t2.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://www.\" +\r\n    //     \"https://www.google.com/s2/favicons?sz=128&domain_url=http://www.\" +\r\n    //     value +\r\n    //     \".com&size=128\"\r\n    //   \"  https://icons.duckduckgo.com/ip3/www.google.com.ico\"\r\n    // );\r\n    // setName2(\r\n      // \"https://t2.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=\" +\r\n      //   value +\r\n      //   \"&size=128\"\r\n    // );\r\n\r\n    if (value != null){ \r\n      conveImg(value);\r\n      conveImgURL(value)}\r\n  };\r\n\r\n  const display = () => {\r\n    const dataURL = stageEl ? stageEl.current.getStage().toDataURL() : null;\r\n\r\n    const payload = {\r\n      img: dataURL,\r\n    };\r\n    // console.log(JSON.stringify(payload))\r\n\r\n    //data.append(\"json\", JSON.stringify(payload))\r\n    // fetch(\"http://localhost:5000/api/tmp/save\", {\r\n      fetch(\"https://logolego.bookmane.in/api/save\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    })\r\n      .then(function (res) {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        setPrevLink(res);\r\n        console.log(res);\r\n      });\r\n  };\r\n  var x = 1;\r\n  const erase = () => {\r\n    setDispImg(null);\r\n    setShow(false);\r\n    setCanvasShow(true);\r\n    setPrevHide(true);\r\n    setBtnHide(true);\r\n  };\r\n\r\n  const showCanvas = () => {\r\n    setCanvasShow(true);\r\n    setBtnHide(true);\r\n    setBtnShow(false);\r\n    setPrevHide(true);\r\n  };\r\n\r\n  const hideCanvas = () => {\r\n    setCanvasShow(false);\r\n    setBtnHide(false);\r\n    setBtnShow(true);\r\n    setPrevHide(false);\r\n  };\r\n\r\n  const preview = () => {\r\n    const dataURL = stageEl ? stageEl.current.getStage().toDataURL() : null;\r\n    console.log(\"dataurl=\", dataURL);\r\n    var link = document.createElement(\"a\");\r\n    link.href = dataURL;\r\n\r\n    display(); // saves to db\r\n    setDispImg(link.href);\r\n\r\n    setShow(true);\r\n    setCanvasShow(false);\r\n    setPrevHide(false);\r\n    setBtnHide(false);\r\n  };\r\n  //end\r\n  const download = () => {\r\n    //get stage dataUrl\r\n    const dataURL = stageEl ? stageEl.current.getStage().toDataURL() : null;\r\n    var link = document.createElement(\"a\");\r\n    link.download = \"react-generator\";\r\n    link.href = dataURL;\r\n    document.body.appendChild(link);\r\n    // link.click();\r\n    document.body.removeChild(link);\r\n    console.log(link.href);\r\n  };\r\n\r\n  //tried background here\r\n  const addBG = () => {\r\n    const rect = {\r\n      x: getRandomInt(100),\r\n      y: getRandomInt(100),\r\n      width: 100,\r\n      height: 100,\r\n      strokeWidth: 3, // border width\r\n      stroke: \"black\",\r\n      fill: \"white\",\r\n      id: `rect${rectangles.length + 1}`,\r\n    };\r\n    const rects = rectangles.concat([rect]);\r\n    setRectangles(rects);\r\n    const shs = shapes.concat([`rect${rectangles.length + 1}`]);\r\n    setShapes(shs);\r\n  };\r\n\r\n  //adding rectangles\r\n  const addRectangle = () => {\r\n    const rect = {\r\n      x: getRandomInt(100),\r\n      y: getRandomInt(100),\r\n      width: 100,\r\n      height: 100,\r\n      strokeWidth: 3, // border width\r\n      stroke: \"black\",\r\n      // fill: \"black\",\r\n      id: `rect${rectangles.length + 1}`,\r\n    };\r\n    const rects = rectangles.concat([rect]);\r\n    setRectangles(rects);\r\n    const shs = shapes.concat([`rect${rectangles.length + 1}`]);\r\n    setShapes(shs);\r\n  };\r\n  const addCircle = () => {\r\n    const circ = {\r\n      x: getRandomInt(100),\r\n      y: getRandomInt(100),\r\n      width: 100,\r\n      height: 100,\r\n      strokeWidth: 3, // border width\r\n      stroke: \"black\",\r\n      //fill: \"black\",\r\n      id: `circ${circles.length + 1}`,\r\n    };\r\n    const circs = circles.concat([circ]);\r\n    setCircles(circs);\r\n    const shs = shapes.concat([`circ${circles.length + 1}`]);\r\n    setShapes(shs);\r\n  };\r\n  const drawLine = () => {\r\n    if (draw) addLine(stageEl.current.getStage(), layerEl.current, \"brush\");\r\n  };\r\n  const eraseLine = () => {\r\n    addLine(stageEl.current.getStage(), layerEl.current, \"erase\");\r\n  };\r\n  const doNothing = () => {\r\n    // setDraw(false)\r\n    // console.log(draw)\r\n    // nothing(stageEl.current.getStage(), layerEl.current);\r\n    addLine(stageEl.current.getStage(), layerEl.current, \"none\");\r\n  };\r\n  const drawText = () => {\r\n    const id = addTextNode(stageEl.current.getStage(), layerEl.current);\r\n    const shs = shapes.concat([id]);\r\n    setShapes(shs);\r\n  };\r\n\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n  const undo = () => {\r\n    const lastId = shapes[shapes.length - 1];\r\n    let index = circles.findIndex((c) => c.id === lastId);\r\n    if (index !== -1) {\r\n      circles.splice(index, 1);\r\n      setCircles(circles);\r\n    }\r\n    index = rectangles.findIndex((r) => r.id === lastId);\r\n    if (index !== -1) {\r\n      rectangles.splice(index, 1);\r\n      setRectangles(rectangles);\r\n    }\r\n    // index = images.findIndex((i) => i.id === lastId);\r\n    // console.log('ind-',index)\r\n    // if(index !== -1) {\r\n    //   index = images.length-1\r\n    //   console.log(\"len -\",index)\r\n    // //  const newImages = [...images];\r\n    // images.splice(index, 1);\r\n    // setImages(images);\r\n    // }\r\n    shapes.pop();\r\n    setShapes(shapes);\r\n    forceUpdate();\r\n  };\r\n\r\n  const undoImage = () => {\r\n    let index = images.length - 1;\r\n    console.log(\"ind-\", index);\r\n    if (index !== -1) {\r\n      console.log(\"len -\", index);\r\n      //  const newImages = [...images];\r\n      images.splice(index, 1);\r\n      setImages(images);\r\n    }\r\n    // shapes.pop();\r\n    // setShapes(shapes);\r\n    forceUpdate();\r\n  };\r\n\r\n  document.addEventListener(\"keydown\", (ev) => {\r\n    if (ev.code === \"Delete\") {\r\n      let index = circles.findIndex((c) => c.id === selectedId);\r\n      if (index !== -1) {\r\n        circles.splice(index, 1);\r\n        setCircles(circles);\r\n      }\r\n      index = rectangles.findIndex((r) => r.id === selectedId);\r\n      if (index !== -1) {\r\n        rectangles.splice(index, 1);\r\n        setRectangles(rectangles);\r\n      }\r\n      index = images.findIndex((i) => i.id === selectedId);\r\n      if (index !== -1) {\r\n        images.splice(index, 1);\r\n        setImages(images);\r\n      }\r\n\r\n      forceUpdate();\r\n    }\r\n  });\r\n\r\n  const handleClick = () => {\r\n    handleChange(document.getElementById(\"myInput\").value);\r\n  };\r\n\r\n  const loadFn = () => {\r\n    showCanvas();\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      {/* For the icon components  */}\r\n\r\n      <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\"\r\n      />\r\n      {/* <div id=\"yt-video\">\r\n        <center>\r\n          <iframe\r\n            src=\"https://www.youtube.com/embed/E7wJTI-1dvQ\"\r\n            frameBorder=\"2\"\r\n            margin-top-height=\"50\"\r\n            allow=\"autoplay; encrypted-media\"\r\n            allowFullScreen\r\n            title=\"video\"\r\n            width=\"600\"\r\n            height=\"300\"\r\n          />\r\n        </center>\r\n      </div> */}\r\n      <center>\r\n        <div id=\"input-area\">\r\n          <textarea\r\n            autoComplete=\"off\"\r\n            placeholder=\"Search for the required logo\"\r\n            id=\"myInput\"\r\n            name=\"name\"\r\n            className=\"textzone\"\r\n            onChange={(event) => handleChange(event.target.value)}\r\n          />\r\n          {/* <Button color=\"primary\" id=\"search-btn\" onClick = {handleClick}>Search</Button> */}\r\n        </div>\r\n        {btnShow ? (\r\n          <Button\r\n            color=\"primary\"\r\n            id=\"canvas-show-btn\"\r\n            onClick={showCanvas}\r\n            title=\"Show Canvas\"\r\n          >\r\n            Show Canvas\r\n          </Button>\r\n        ) : null}\r\n      </center>\r\n      <div></div>\r\n      {}\r\n      <center>\r\n        \r\n      </center>\r\n      <center>\r\n        {/* <img\r\n          id=\"logo\"\r\n          // src = {name}\r\n          src={tmp}\r\n          onLoad={loadFn}\r\n          // width = \"60px\"\r\n          // height = \"60px\"\r\n          //  src={getBase64Image(name)} //name}\r\n          // src = 'http://localhost:3000/images/6210893e5d0d95247d43f9d3'//{getBase64Image('http://localhost:3000/images/6210893e5d0d95247d43f9d3')}\r\n          draggable=\"true\"\r\n          onDragStart={(e) => {\r\n            dragUrl.current = e.target.src;\r\n           \r\n          }}\r\n         \r\n        /> */}\r\n        <img\r\n          // alt = {notfound}\r\n          // height=\"50rem\"\r\n          //     width=\"50rem\"\r\n          key=\"img3\"\r\n          id=\"logo\"\r\n          src={tmp}\r\n          onLoad={loadFn}\r\n          draggable=\"true\"\r\n          onDragStart={(e) => {\r\n            dragUrl.current = e.target.src;\r\n          }}\r\n        />\r\n       <img\r\n          // alt = {notfound}\r\n          // height=\"50rem\"\r\n          //     width=\"50rem\"\r\n          key=\"img3\"\r\n          id=\"logo\"\r\n          src={tmp2}\r\n          onLoad={loadFn}\r\n          draggable=\"true\"\r\n          onDragStart={(e) => {\r\n            dragUrl.current = e.target.src;\r\n          }}\r\n        />\r\n\r\n        {/* <div\r\n            onDrop={(e) => {\r\n              e.preventDefault();\r\n              // register event position\r\n              stageEl.current.setPointersPositions(e);\r\n              // add image\r\n              setImages(\r\n                images.concat([\r\n                  {\r\n                    ...stageEl.current.getRelativePointerPosition(),\r\n                    src: dragUrl.current\r\n                  }\r\n                ])\r\n              );\r\n            }}\r\n            onDragOver={(e) => e.preventDefault()}\r\n          ></div> */}\r\n        <img\r\n          src={getBase64Image2(name2)} //name}\r\n          draggable=\"true\"\r\n          onDragStart={(e) => {\r\n            dragUrl.current = e.target.src;\r\n          }}\r\n        />\r\n      </center>\r\n\r\n      {btnHide ? (\r\n        <Button\r\n          color=\"primary\"\r\n          id=\"canvas-hide-btn\"\r\n          onClick={hideCanvas}\r\n          title=\"Close\"\r\n        >\r\n          <i class=\"fa-solid fa-xmark\"></i>\r\n        </Button>\r\n      ) : null}\r\n\r\n      <div></div>\r\n\r\n      <div className=\"container\">\r\n        {canvasShow ? (\r\n          <div className=\"bts\" role=\"group\" aria-label=\"Basic example\">\r\n            <div></div>\r\n            <Button color=\"primary\" onClick={addRectangle} title=\"Square\">\r\n              <i class=\"fa-regular fa-square\"></i>\r\n            </Button>\r\n            <Button color=\"primary\" onClick={addCircle} title=\"Circle\">\r\n              <i class=\"fa-regular fa-circle\"></i>\r\n            </Button>\r\n            <Button color=\"primary\" onClick={drawLine} title=\"Pen\">\r\n              <i class=\"fa-solid fa-pencil\"></i>\r\n            </Button>\r\n\r\n            <Button color=\"primary\" onClick={eraseLine} title=\"Eraser\">\r\n              <i class=\"fa-solid fa-eraser\"></i>\r\n            </Button>\r\n\r\n            <Button color=\"primary\" onClick={drawText} title=\"Text\">\r\n              <i class=\"fa-solid fa-font\"></i>\r\n            </Button>\r\n\r\n            <Button color=\"primary\" onClick={undo} title=\"Undo Shape\">\r\n              <i class=\"fa-solid fa-delete-left\"></i>\r\n            </Button>\r\n            {/* <Button color=\"primary\" onClick={download} title=\"download\">\r\n              Export\r\n            </Button> */}\r\n            <Button color=\"primary\" onClick={undoImage} title=\"Undo Image\">\r\n              <i class=\"fa fa-undo\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n            <Button color=\"primary\" onClick={doNothing} title=\"Pointer\">\r\n              <i class=\"fas fa-mouse-pointer\"></i>\r\n            </Button>\r\n            {/* <Button color=\"primary\" onClick={display}>\r\n                Save to db\r\n              </Button> */}\r\n\r\n            <Button color=\"primary\" onClick={refreshPage} title=\"Clear\">\r\n              Clear\r\n            </Button>\r\n\r\n            {isToggled}\r\n          </div>\r\n        ) : null}\r\n        {imageList.map((item) => {\r\n          return (\r\n            <img\r\n              src={item}\r\n              draggable=\"true\"\r\n              onDragStart={(e) => {\r\n                dragUrl.current = item;\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        <div\r\n          onDrop={(e) => {\r\n            e.preventDefault();\r\n            // register event position\r\n            stageEl.current.setPointersPositions(e);\r\n            // add image\r\n\r\n            setImages(\r\n              images.concat([\r\n                {\r\n                  ...stageEl.current.getRelativePointerPosition(),\r\n                  src: dragUrl.current,\r\n                },\r\n              ])\r\n            );\r\n          }}\r\n          onDragOver={(e) => e.preventDefault()}\r\n        >\r\n          {canvasShow ? (\r\n            <div id=\"child-canvas\">\r\n              <div\r\n                onDrop={(e) => {\r\n                  e.preventDefault();\r\n                  // register event position\r\n                  stageEl.current.setPointersPositions(e);\r\n                  // add image\r\n                  setImages(\r\n                    images.concat([\r\n                      {\r\n                        ...stageEl.current.getRelativePointerPosition(),\r\n                        src: dragUrl.current,\r\n                      },\r\n                    ])\r\n                  );\r\n                }}\r\n                onDragOver={(e) => e.preventDefault()}\r\n              ></div>\r\n              <Stage\r\n                style={{\r\n                  border: \"1px solid grey\",\r\n                  width: \"1250px\",\r\n                  position: \"relative\",\r\n                  left: \"10px\",\r\n                  bottom: \"20px\",\r\n                  top: \"5px\",\r\n                  background: \"#f4f7f6\",\r\n                }}\r\n                width={window.innerWidth * 0.775}\r\n                height={window.innerHeight - 150}\r\n                ref={stageEl} //,stageRef}\r\n                onMouseDown={(e) => {\r\n                  // deselect when clicked on empty area\r\n                  const clickedOnEmpty = e.target === e.target.getStage();\r\n                  if (clickedOnEmpty) {\r\n                    selectShape(null);\r\n                  }\r\n                }}\r\n              >\r\n                <Layer ref={layerEl}>\r\n                  {/* {images.map((image) => {\r\n                    return <URLImage image={image} />;\r\n                  })} */}\r\n                  {images.map((image, index) => {\r\n                    return (\r\n                      <URLImage\r\n                        image={image}\r\n                        key={index}\r\n                        shapeProps={image}\r\n                        stageScale={stageSpec.scale}\r\n                        isSelected={image === selectedId}\r\n                        unSelectShape={unSelectShape}\r\n                        onClick={handleRemove}\r\n                        onSelect={() => {\r\n                          selectShape(image);\r\n                        }}\r\n                        onChange={(newAttrs) => {\r\n                          const rects = images.slice();\r\n                          rects[index] = newAttrs;\r\n                          setImages(rects);\r\n                        }}\r\n                        onDelete={onDeleteImage}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {rectangles.map((rect, i) => {\r\n                    return (\r\n                      <Rectangle\r\n                        key={i}\r\n                        shapeProps={rect}\r\n                        isSelected={rect.id === selectedId}\r\n                        onSelect={() => {\r\n                          selectShape(rect.id);\r\n                        }}\r\n                        onChange={(newAttrs) => {\r\n                          const rects = rectangles.slice();\r\n                          rects[i] = newAttrs;\r\n                          setRectangles(rects);\r\n                        }}\r\n                      />\r\n                    );\r\n                  })}\r\n\r\n                  {circles.map((circle, i) => {\r\n                    return (\r\n                      <Circle\r\n                        key={i}\r\n                        shapeProps={circle}\r\n                        isSelected={circle.id === selectedId}\r\n                        onSelect={() => {\r\n                          selectShape(circle.id);\r\n                        }}\r\n                        onChange={(newAttrs) => {\r\n                          const circs = circles.slice();\r\n                          circs[i] = newAttrs;\r\n                          setCircles(circs);\r\n                        }}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {images.map((image, i) => {\r\n                    return (\r\n                      <Image\r\n                        key={i}\r\n                        imageUrl={image.content}\r\n                        isSelected={image.id === selectedId}\r\n                        onSelect={() => {\r\n                          selectShape(image.id);\r\n                        }}\r\n                        onChange={(newAttrs) => {\r\n                          const imgs = images.slice();\r\n                          imgs[i] = newAttrs;\r\n                        }}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Layer>\r\n              </Stage>\r\n            </div>\r\n          ) : null}\r\n\r\n          {prevHide ? (\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={preview}\r\n              title=\"Preview\"\r\n              id=\"preview-btn\"\r\n            >\r\n              <i class=\"fas fa-arrow-right\"></i>\r\n            </Button>\r\n          ) : null}\r\n\r\n          {show ? (\r\n            <button\r\n              type=\"button\"\r\n              id=\"reset-btn\"\r\n              class=\"btn btn-primary\"\r\n              onClick={erase}\r\n            >\r\n              Reset\r\n            </button>\r\n          ) : null}\r\n          <div className=\"child-preview\" id=\"preview\">\r\n            <img id=\"preview-image\" src={dispImg} width=\"1000\"></img>\r\n\r\n            <div className=\"tweet-text\" id=\"textbox-chars\">\r\n              {show ? (\r\n                <textarea\r\n                  className=\"tweet-text-area\"\r\n                  value={tweet}\r\n                  onChange={(e) => setTweet(e.target.value)}\r\n                />\r\n              ) : null}\r\n              {/* <link rel=\"canonical\" href=\"/web/tweet-button\"></link> */}\r\n              {show ? (\r\n                <a\r\n                  class=\"twitter-share-button\"\r\n                  href={`https://twitter.com/intent/tweet?text=${tweet}&url=https://logolego.bookmane.in/images/${prevLink}`}\r\n                  data-size=\"large\"\r\n                  target=\"_blank\"\r\n                >\r\n                  Tweet\r\n                </a>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default HomePage;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nimport Dropzone from \"react-dropzone\";\r\n\r\nimport {DragAndDrop} from \"react-file-drop\"\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./HomePage.css\";\r\nimport { Stage, Layer, Image } from \"react-konva\";\r\nimport Rectangle from \"./Rectangle\";\r\nimport Circle from \"./Circle\";\r\nimport { addLine } from \"./line\";\r\nimport { addTextNode } from \"./textNode\";\r\nimport useImage from \"use-image\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nuuidv1();\r\n//https://www.google.com/s2/favicons?sz=128&domain_url=yahoo.com\r\n//https://www.google.com/s2/favicons?sz=64&domain_url=microsoft.com\r\n//Image drag drop with URLImage\r\nconst URLImage = ({ image }) => {\r\n  const [img] = useImage(image.src);\r\n  return (\r\n    <Image\r\n      image={img}\r\n      x={image.x}\r\n      y={image.y}\r\n      offsetX={img ? img.width / 2 : 0}\r\n      offsetY={img ? img.height / 2 : 0}\r\n    />\r\n  );\r\n};\r\n\r\nfunction Home() {\r\n  const [rectangles, setRectangles] = useState([]);\r\n  const [circles, setCircles] = useState([]);\r\n  const [selectedId, selectShape] = useState(null);\r\n  const [shapes, setShapes] = React.useState([]);\r\n  const [, updateState] = React.useState();\r\n  const stageEl = React.createRef();\r\n  const layerEl = React.createRef();\r\n  const [name, setName] = React.useState(\"\");\r\n  const dragUrl = React.useRef();\r\n  const [images, setImages] = React.useState([]);\r\n  let y;\r\n  const [imageList, setImageList] = React.useState([]);\r\n\r\n  const getRandomInt = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  };\r\n\r\n  async function getBase64(file) {\r\n    let result_base64 = await new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      reader.onload = (e) => resolve(reader.result);\r\n      reader.readAsDataURL(file);\r\n    });\r\n    return result_base64;\r\n  }\r\n\r\n  const takeshot = async () => {\r\n    let div = await document.getElementById(\"canvass\");\r\n\r\n    // Use the html2canvas\r\n    // function to take a screenshot\r\n    // and append it\r\n    // to the output div\r\n    html2canvas(div, {\r\n      allowTaint: true,\r\n      foreignObjectRendering: true,\r\n      useCORS: true,\r\n    }).then(function (canvas) {\r\n      document.getElementById(\"output\").appendChild(canvas);\r\n    });\r\n  };\r\n\r\n  function gotFile(file) {\r\n    Dropzone.style(\"display\", \"none\");\r\n\r\n    if (file.type === \"image\") {\r\n      var image = new Image();\r\n\r\n      image.onload = function () {\r\n        document.body.appendChild(this);\r\n      };\r\n\r\n      image.src = file.data;\r\n    }\r\n  }\r\n\r\n  //end\r\n  const download = () => {\r\n    //get stage dataUrl\r\n    const dataURL = stageEl ? stageEl.current.getStage().toDataURL() : null;\r\n    var link = document.createElement(\"a\");\r\n    link.download = \"react-generator\";\r\n    link.href = dataURL;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const addRectangle = () => {\r\n    const rect = {\r\n      x: getRandomInt(100),\r\n      y: getRandomInt(100),\r\n      width: 100,\r\n      height: 100,\r\n      strokeWidth: 3, // border width\r\n      stroke: \"black\",\r\n      // fill: \"black\",\r\n      id: `rect${rectangles.length + 1}`,\r\n    };\r\n    const rects = rectangles.concat([rect]);\r\n    setRectangles(rects);\r\n    const shs = shapes.concat([`rect${rectangles.length + 1}`]);\r\n    setShapes(shs);\r\n  };\r\n  const addCircle = () => {\r\n    const circ = {\r\n      x: getRandomInt(100),\r\n      y: getRandomInt(100),\r\n      width: 100,\r\n      height: 100,\r\n      strokeWidth: 3, // border width\r\n      stroke: \"black\",\r\n      //fill: \"black\",\r\n      id: `circ${circles.length + 1}`,\r\n    };\r\n    const circs = circles.concat([circ]);\r\n    setCircles(circs);\r\n    const shs = shapes.concat([`circ${circles.length + 1}`]);\r\n    setShapes(shs);\r\n  };\r\n  const drawLine = () => {\r\n    addLine(stageEl.current.getStage(), layerEl.current);\r\n  };\r\n  const eraseLine = () => {\r\n    addLine(stageEl.current.getStage(), layerEl.current, \"erase\");\r\n  };\r\n  const drawText = () => {\r\n    const id = addTextNode(stageEl.current.getStage(), layerEl.current);\r\n    const shs = shapes.concat([id]);\r\n    setShapes(shs);\r\n  };\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n  const fileChange = (ev) => {\r\n    let file = ev.target.files[0];\r\n    let reader = new FileReader();\r\n\r\n    if (file) {\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n  const undo = () => {\r\n    const lastId = shapes[shapes.length - 1];\r\n    let index = circles.findIndex((c) => c.id === lastId);\r\n    if (index !== -1) {\r\n      circles.splice(index, 1);\r\n      setCircles(circles);\r\n    }\r\n    index = rectangles.findIndex((r) => r.id === lastId);\r\n    if (index !== -1) {\r\n      rectangles.splice(index, 1);\r\n      setRectangles(rectangles);\r\n    }\r\n\r\n    shapes.pop();\r\n    setShapes(shapes);\r\n    forceUpdate();\r\n  };\r\n\r\n  document.addEventListener(\"keydown\", (ev) => {\r\n    if (ev.code === \"Delete\") {\r\n      let index = circles.findIndex((c) => c.id === selectedId);\r\n      if (index !== -1) {\r\n        circles.splice(index, 1);\r\n        setCircles(circles);\r\n      }\r\n      index = rectangles.findIndex((r) => r.id === selectedId);\r\n      if (index !== -1) {\r\n        rectangles.splice(index, 1);\r\n        setRectangles(rectangles);\r\n      }\r\n\r\n      forceUpdate();\r\n    }\r\n  });\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div id=\"canvass\">\r\n        <textarea\r\n          autoComplete=\"off\"\r\n          rows=\"4\"\r\n          cols=\"150\"\r\n          placeholder=\"Search for the required logo\"\r\n          id=\"myInput\"\r\n          name=\"name\"\r\n          onChange={(event) =>\r\n            setName(\r\n              \"https://www.google.com/s2/favicons?sz=128&domain_url=\" +\r\n                event.target.value +\r\n                \".com\"\r\n            )\r\n          }\r\n        />\r\n        <textarea\r\n          autoComplete=\"off\"\r\n          rows=\"4\"\r\n          cols=\"150\"\r\n          placeholder=\"Enter the URL to fetch the logo\"\r\n          id=\"myInput\"\r\n          name=\"name\"\r\n          onChange={(event) =>\r\n            setName(\r\n              \"https://www.google.com/s2/favicons?sz=128&domain_url=\" +\r\n                event.target.value\r\n            )\r\n          }\r\n        />\r\n   \r\n        <div></div>\r\n        <Dropzone\r\n           onDrop = {\r\n            (acceptedFiles) => {\r\n                \r\n            y = getBase64(acceptedFiles[0]);\r\n            console.log(acceptedFiles[0])\r\n            y.then((result) => {\r\n              setImageList((prev) => [...prev, result]);\r\n            });\r\n          }}\r\n        >\r\n          {({ getRootProps, getInputProps }) => (\r\n            <section>\r\n              <div {...getRootProps({ className: \"dropzone\" })}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag 'n' drop some files here</p>\r\n              </div>\r\n            </section>\r\n          )}\r\n        </Dropzone>\r\n        <img\r\n          src={name} //name}\r\n          draggable=\"true\"\r\n          onDragStart={(e) => {\r\n            dragUrl.current = e.target.src;\r\n          }}\r\n        />\r\n\r\n        <div></div>\r\n\r\n        <ButtonGroup>\r\n          <Button color=\"primary\" onClick={addRectangle}>\r\n            Rectangle\r\n          </Button>\r\n          <Button color=\"primary\" onClick={addCircle}>\r\n            Circle\r\n          </Button>\r\n          <Button color=\"primary\" onClick={drawLine}>\r\n            Line\r\n          </Button>\r\n\r\n          <Button color=\"primary\" onClick={eraseLine}>\r\n            Erase\r\n          </Button>\r\n\r\n          <Button color=\"primary\" onClick={drawText}>\r\n            Text\r\n          </Button>\r\n\r\n          <Button color=\"primary\" onClick={undo}>\r\n            Undo\r\n          </Button>\r\n          <Button color=\"primary\" onClick={download}>\r\n            Export\r\n          </Button>\r\n        </ButtonGroup>\r\n        {imageList.map((item) => {\r\n          return (\r\n            <img\r\n              src={item}\r\n              draggable=\"true\"\r\n              onDragStart={(e) => {\r\n                dragUrl.current = item;\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        <div\r\n          onDrop={(e) => {\r\n            e.preventDefault();\r\n            // register event position\r\n            stageEl.current.setPointersPositions(e);\r\n            // add image\r\n            setImages(\r\n              images.concat([\r\n                {\r\n                  ...stageEl.current.getPointerPosition(),\r\n                  src: dragUrl.current,\r\n                },\r\n              ])\r\n            );\r\n          }}\r\n          onDragOver={(e) => e.preventDefault()}\r\n        >\r\n          <Stage\r\n            style={{ border: \"3px solid grey\" }}\r\n            width={window.innerWidth * 0.9}\r\n            height={window.innerHeight - 150}\r\n            ref={stageEl} //,stageRef}\r\n            onMouseDown={(e) => {\r\n              // deselect when clicked on empty area\r\n              const clickedOnEmpty = e.target === e.target.getStage();\r\n              if (clickedOnEmpty) {\r\n                selectShape(null);\r\n              }\r\n            }}\r\n          >\r\n            <Layer ref={layerEl}>\r\n              {images.map((image) => {\r\n                return <URLImage image={image} />;\r\n              })}\r\n              {rectangles.map((rect, i) => {\r\n                return (\r\n                  <Rectangle\r\n                    key={i}\r\n                    shapeProps={rect}\r\n                    isSelected={rect.id === selectedId}\r\n                    onSelect={() => {\r\n                      selectShape(rect.id);\r\n                    }}\r\n                    onChange={(newAttrs) => {\r\n                      const rects = rectangles.slice();\r\n                      rects[i] = newAttrs;\r\n                      setRectangles(rects);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n\r\n              {circles.map((circle, i) => {\r\n                return (\r\n                  <Circle\r\n                    key={i}\r\n                    shapeProps={circle}\r\n                    isSelected={circle.id === selectedId}\r\n                    onSelect={() => {\r\n                      selectShape(circle.id);\r\n                    }}\r\n                    onChange={(newAttrs) => {\r\n                      const circs = circles.slice();\r\n                      circs[i] = newAttrs;\r\n                      setCircles(circs);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"output\"></div>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n\r\n\r\n// import React, {useCallback} from 'react'\r\n// import {useDropzone} from 'react-dropzone'\r\n\r\n// function MyDropzone() {\r\n//   const onDrop = useCallback(acceptedFiles => {\r\n//     // Do something with the files\r\n//     console.log(acceptedFiles)\r\n//   }, [])\r\n//   const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n//   return (\r\n\r\n//     <div>\r\n//       <img src = \"https://icons.duckduckgo.com/ip3/www.google.com.ico\" draggable = \"true\"/>\r\n//     <div {...getRootProps()}>\r\n//       <input {...getInputProps()} />\r\n//       {\r\n//         isDragActive ?\r\n//           <p>Drop the files here ...</p> :\r\n//           <p>Drag 'n' drop some files here, or click to select files</p>\r\n//       }\r\n//     </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default MyDropzone","import React , {useState, useEffect} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\"\r\n\r\nconst Images = () => {\r\n  let {id} = useParams();\r\n \r\n  const [data,setData]=useState([]);\r\n  const display = () => {\r\n\r\n  axios.get(`http://localhost:5000/api/images/${id}`).then((response)=> {         \r\n    console.log(response)\r\n  setData(response)\r\n});\r\n  }\r\n  useEffect(()=>{\r\n    display()\r\n  },[])\r\n  return (\r\n    <div>\r\n    <img src = {data.data}/>\r\n    </div>\r\n  )\r\n}\r\nexport default Images;\r\n","import Login from \"./components/login\";\nimport HomePage from \"./canvas/HomePage\";\nimport Test from \"./canvas/Test\"\nimport Images from \"./components/images\"\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Link,\n  BrowserRouter,\n} from \"react-router-dom\";\nimport React, { Component }  from 'react';\n\nfunction App() {\n  return (\n    // <Router>\n   <BrowserRouter> \n    {/* <Navbar /> */}\n      <Routes>\n        <Route exact path=\"/\" element={<HomePage />}></Route>\n        <Route path = \"/images/:id\" element = {<Images/>}/>\n        {/* <Route path=\"/home\" element={<Login />}></Route> */}\n        {/* <Route exact path='/images' component={<Images/>} /> */}\n       \n        {/* <Route path = \"/images\" element = {<Images/>}></Route> */}\n      </Routes>\n      {/* </Router> */}\n    </BrowserRouter>\n\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}